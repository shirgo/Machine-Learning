function [trainedClassifier, validationAccuracy, cvp] = trainBaggedTreesEnsClassifier(trainingData)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
% 
%  Input:
%      trainingData: a table containing the same predictor and response
%       columns as imported into the app.
% 
%  Output:
%      trainedClassifier: a struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
% 
%      trainedClassifier.predictFcn: a function to make predictions on new
%       data.
% 
%      validationAccuracy: a double containing the accuracy in percent. In
%       the app, the History list displays this overall accuracy score for
%       each model.
% 
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
% 
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
% 
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
% 
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB


% Extract predictors and response 
% This code processes the data into the right shape for training the 
% model.
inputTable = trainingData;
predictorNames = {'TotalAccXMean', 'TotalAccYMean', 'TotalAccZMean', 'BodyAccXRMS', 'BodyAccYRMS', 'BodyAccZRMS', 'BodyAccXCovZeroValue', 'BodyAccXCovFirstPos', 'BodyAccXCovFirstValue', 'BodyAccYCovZeroValue', 'BodyAccYCovFirstPos', 'BodyAccYCovFirstValue', 'BodyAccZCovZeroValue', 'BodyAccZCovFirstPos', 'BodyAccZCovFirstValue', 'BodyAccXSpectPos1', 'BodyAccXSpectPos2', 'BodyAccXSpectPos3', 'BodyAccXSpectPos4', 'BodyAccXSpectPos5', 'BodyAccXSpectPos6', 'BodyAccXSpectVal1', 'BodyAccXSpectVal2', 'BodyAccXSpectVal3', 'BodyAccXSpectVal4', 'BodyAccXSpectVal5', 'BodyAccXSpectVal6', 'BodyAccYSpectPos1', 'BodyAccYSpectPos2', 'BodyAccYSpectPos3', 'BodyAccYSpectPos4', 'BodyAccYSpectPos5', 'BodyAccYSpectPos6', 'BodyAccYSpectVal1', 'BodyAccYSpectVal2', 'BodyAccYSpectVal3', 'BodyAccYSpectVal4', 'BodyAccYSpectVal5', 'BodyAccYSpectVal6', 'BodyAccZSpectPos1', 'BodyAccZSpectPos2', 'BodyAccZSpectPos3', 'BodyAccZSpectPos4', 'BodyAccZSpectPos5', 'BodyAccZSpectPos6', 'BodyAccZSpectVal1', 'BodyAccZSpectVal2', 'BodyAccZSpectVal3', 'BodyAccZSpectVal4', 'BodyAccZSpectVal5', 'BodyAccZSpectVal6', 'BodyAccXPowerBand1', 'BodyAccXPowerBand2', 'BodyAccXPowerBand3', 'BodyAccXPowerBand4', 'BodyAccXPowerBand5', 'BodyAccYPowerBand1', 'BodyAccYPowerBand2', 'BodyAccYPowerBand3', 'BodyAccYPowerBand4', 'BodyAccYPowerBand5', 'BodyAccZPowerBand1', 'BodyAccZPowerBand2', 'BodyAccZPowerBand3', 'BodyAccZPowerBand4', 'BodyAccZPowerBand5'};
predictors = inputTable(:, predictorNames);
response = inputTable.ActivityID;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Train a classifier 
% This code specifies all the classifier options and trains the classifier.
template = templateTree(...
'MaxNumSplits', 10298);

% Extract predictors and response 
% This code processes the data into the right shape for training the 
% model.
inputTable = trainingData;
predictorNames = {'TotalAccXMean', 'TotalAccYMean', 'TotalAccZMean', 'BodyAccXRMS', 'BodyAccYRMS', 'BodyAccZRMS', 'BodyAccXCovZeroValue', 'BodyAccXCovFirstPos', 'BodyAccXCovFirstValue', 'BodyAccYCovZeroValue', 'BodyAccYCovFirstPos', 'BodyAccYCovFirstValue', 'BodyAccZCovZeroValue', 'BodyAccZCovFirstPos', 'BodyAccZCovFirstValue', 'BodyAccXSpectPos1', 'BodyAccXSpectPos2', 'BodyAccXSpectPos3', 'BodyAccXSpectPos4', 'BodyAccXSpectPos5', 'BodyAccXSpectPos6', 'BodyAccXSpectVal1', 'BodyAccXSpectVal2', 'BodyAccXSpectVal3', 'BodyAccXSpectVal4', 'BodyAccXSpectVal5', 'BodyAccXSpectVal6', 'BodyAccYSpectPos1', 'BodyAccYSpectPos2', 'BodyAccYSpectPos3', 'BodyAccYSpectPos4', 'BodyAccYSpectPos5', 'BodyAccYSpectPos6', 'BodyAccYSpectVal1', 'BodyAccYSpectVal2', 'BodyAccYSpectVal3', 'BodyAccYSpectVal4', 'BodyAccYSpectVal5', 'BodyAccYSpectVal6', 'BodyAccZSpectPos1', 'BodyAccZSpectPos2', 'BodyAccZSpectPos3', 'BodyAccZSpectPos4', 'BodyAccZSpectPos5', 'BodyAccZSpectPos6', 'BodyAccZSpectVal1', 'BodyAccZSpectVal2', 'BodyAccZSpectVal3', 'BodyAccZSpectVal4', 'BodyAccZSpectVal5', 'BodyAccZSpectVal6', 'BodyAccXPowerBand1', 'BodyAccXPowerBand2', 'BodyAccXPowerBand3', 'BodyAccXPowerBand4', 'BodyAccXPowerBand5', 'BodyAccYPowerBand1', 'BodyAccYPowerBand2', 'BodyAccYPowerBand3', 'BodyAccYPowerBand4', 'BodyAccYPowerBand5', 'BodyAccZPowerBand1', 'BodyAccZPowerBand2', 'BodyAccZPowerBand3', 'BodyAccZPowerBand4', 'BodyAccZPowerBand5'};
predictors = inputTable(:, predictorNames);
response = inputTable.ActivityID;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Set up holdout validation
cvp = cvpartition(response, 'Holdout', 0.25);
trainingPredictors = predictors(cvp.training, :);
trainingResponse = response(cvp.training, :);
trainingIsCategoricalPredictor = isCategoricalPredictor;

% Train a classifier 
% This code specifies all the classifier options and trains the classifier.
template = templateTree(...
'MaxNumSplits', 10298);
classificationEnsemble = fitcensemble(...
trainingPredictors, ...
trainingResponse, ...
'Method', 'Bag', ...
'NumLearningCycles', 30, ...
'Learners', template, ...
'ClassNames', categorical({'Walking'; 'WalkingUpstairs'; 'WalkingDownstairs'; 'Sitting'; 'Standing'; 'Laying'}, {'Walking' 'WalkingUpstairs' 'WalkingDownstairs' 'Sitting' 'Standing' 'Laying'}));

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
ensemblePredictFcn = @(x) predict(classificationEnsemble, x);
validationPredictFcn = @(x) ensemblePredictFcn(x);
trainedClassifier.predictFcn = @(x) ensemblePredictFcn(predictorExtractionFcn(x));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = {'TotalAccXMean', 'TotalAccYMean', 'TotalAccZMean', 'BodyAccXRMS', 'BodyAccYRMS', 'BodyAccZRMS', 'BodyAccXCovZeroValue', 'BodyAccXCovFirstPos', 'BodyAccXCovFirstValue', 'BodyAccYCovZeroValue', 'BodyAccYCovFirstPos', 'BodyAccYCovFirstValue', 'BodyAccZCovZeroValue', 'BodyAccZCovFirstPos', 'BodyAccZCovFirstValue', 'BodyAccXSpectPos1', 'BodyAccXSpectPos2', 'BodyAccXSpectPos3', 'BodyAccXSpectPos4', 'BodyAccXSpectPos5', 'BodyAccXSpectPos6', 'BodyAccXSpectVal1', 'BodyAccXSpectVal2', 'BodyAccXSpectVal3', 'BodyAccXSpectVal4', 'BodyAccXSpectVal5', 'BodyAccXSpectVal6', 'BodyAccYSpectPos1', 'BodyAccYSpectPos2', 'BodyAccYSpectPos3', 'BodyAccYSpectPos4', 'BodyAccYSpectPos5', 'BodyAccYSpectPos6', 'BodyAccYSpectVal1', 'BodyAccYSpectVal2', 'BodyAccYSpectVal3', 'BodyAccYSpectVal4', 'BodyAccYSpectVal5', 'BodyAccYSpectVal6', 'BodyAccZSpectPos1', 'BodyAccZSpectPos2', 'BodyAccZSpectPos3', 'BodyAccZSpectPos4', 'BodyAccZSpectPos5', 'BodyAccZSpectPos6', 'BodyAccZSpectVal1', 'BodyAccZSpectVal2', 'BodyAccZSpectVal3', 'BodyAccZSpectVal4', 'BodyAccZSpectVal5', 'BodyAccZSpectVal6', 'BodyAccXPowerBand1', 'BodyAccXPowerBand2', 'BodyAccXPowerBand3', 'BodyAccXPowerBand4', 'BodyAccXPowerBand5', 'BodyAccYPowerBand1', 'BodyAccYPowerBand2', 'BodyAccYPowerBand3', 'BodyAccYPowerBand4', 'BodyAccYPowerBand5', 'BodyAccZPowerBand1', 'BodyAccZPowerBand2', 'BodyAccZPowerBand3', 'BodyAccZPowerBand4', 'BodyAccZPowerBand5'};
trainedClassifier.ClassificationEnsemble = classificationEnsemble;
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2017a.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Compute validation predictions
validationPredictors = predictors(cvp.test, :);
validationResponse = response(cvp.test, :);
[validationPredictions, validationScores] = validationPredictFcn(validationPredictors);

% Compute validation accuracy
correctPredictions = (validationPredictions == validationResponse);
isMissing = ismissing(validationResponse);
correctPredictions = correctPredictions(~isMissing);
validationAccuracy = sum(correctPredictions)/length(correctPredictions);
